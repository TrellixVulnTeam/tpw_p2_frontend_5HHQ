{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { Publication } from '../interfaces/publication';\nimport { User } from '../interfaces/user';\nimport { Publication_Status } from '../interfaces/publication_status';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./users.service\";\nimport * as i3 from \"./pub-status.service\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let PublicationService = /*#__PURE__*/(() => {\n  class PublicationService {\n    constructor(http, userService, pubStatusService) {\n      this.http = http;\n      this.userService = userService;\n      this.pubStatusService = pubStatusService;\n      this.baseUrl = 'http://127.0.0.1:7007/ws/';\n      this.user = new User();\n      this.status = new Publication_Status();\n      let username = localStorage.getItem('username');\n      let token = localStorage.getItem('token'); //this.userService.getUser(username, token).subscribe((user) => this.user = user);\n      //this.pubStatusService.getOne('Por Aprovar').subscribe((status) => this.status = status)\n    }\n\n    getPublication(id) {\n      return this.http.get(this.baseUrl + 'pub?id=' + id);\n    }\n\n    createPublication(form, topics) {\n      let publication = new Publication();\n      topics.forEach(element => {\n        if (element.description == form.value.topic) {\n          publication.topic = element;\n        }\n      });\n      const id = +localStorage.getItem(\"id\");\n      this.user.id = id;\n      this.status.description = 'Por Aprovar';\n      publication.status = this.status;\n      publication.title = form.value.title;\n      publication.content = form.value.content;\n      publication.author = this.user;\n      return this.http.post(this.baseUrl + 'pubcrate', publication, httpOptions);\n    }\n\n    getActivePublications() {\n      return this.http.get(this.baseUrl + 'getPublicationsApproved');\n    }\n\n    getPendentPublications() {\n      return this.http.get(this.baseUrl + 'getPublicationsPendent');\n    }\n\n    getClosedPublications() {\n      return this.http.get(this.baseUrl + 'getPublicationsFiled');\n    }\n\n    getActivePublicationsByUser(id) {\n      return this.http.get(this.baseUrl + 'getAuthorPublicationsApproved?id=' + id);\n    }\n\n    getPendentPublicationsByUser(id) {\n      return this.http.get(this.baseUrl + 'getAuthorPublicationsPendent?id=' + id);\n    }\n\n    getClosedPublicationsByUser(id) {\n      return this.http.get(this.baseUrl + 'getAuthorPublicationsFiled?id=' + id);\n    }\n\n    getFavouritePublicationsByUser(id) {\n      return this.http.get(this.baseUrl + 'getAuthorFavoritePublications?id=' + id);\n    }\n\n    getSearchPublicationsApproved(author, date, topic, title) {\n      return this.http.get(this.baseUrl + 'getSearchPublicationsApproved?author=' + author + '&&date=' + date + '&&topic=' + topic + '&&title=' + title);\n    }\n\n    getSearchPublicationsFilled(author, date, topic, title) {\n      return this.http.get(this.baseUrl + 'getSearchPublicationsFilled?author=' + author + '&&date=' + date + '&&topic=' + topic + '&&title=' + title);\n    }\n\n    getSearchPublicationsPendent(author, date, topic, title) {\n      return this.http.get(this.baseUrl + 'getSearchPublicationsPendent?author=' + author + '&&date=' + date + '&&topic=' + topic + '&&title=' + title);\n    }\n\n    getSearchPublicationsApprovedByUser(id, date, topic, title) {\n      return this.http.get(this.baseUrl + 'getSearchPublicationsApprovedByUser?id=' + id + '&&date=' + date + '&&topic=' + topic + '&&title=' + title);\n    }\n\n    getSearchPublicationsFilledByUser(id, date, topic, title) {\n      return this.http.get(this.baseUrl + 'getSearchPublicationsFilledByUser?id=' + id + '&&date=' + date + '&&topic=' + topic + '&&title=' + title);\n    }\n\n    getSearchPublicationsPendentByUser(id, date, topic, title) {\n      return this.http.get(this.baseUrl + 'getSearchPublicationsPendentByUser?id=' + id + '&&date=' + date + '&&topic=' + topic + '&&title=' + title);\n    }\n\n    getSearchPublicationsApprovedFavorite(id, author, date, topic, title) {\n      return this.http.get(this.baseUrl + 'getSearchPublicationsFavorites?id=' + id + '&&author=' + author + '&&date=' + date + '&&topic=' + topic + '&&title=' + title);\n    }\n\n    updatePublication(publication) {\n      const url = this.baseUrl + 'pubupd';\n      return this.http.put(url, publication, httpOptions);\n    }\n\n  }\n\n  PublicationService.ɵfac = function PublicationService_Factory(t) {\n    return new (t || PublicationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UsersService), i0.ɵɵinject(i3.PubStatusService));\n  };\n\n  PublicationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PublicationService,\n    factory: PublicationService.ɵfac,\n    providedIn: 'root'\n  });\n  return PublicationService;\n})();","map":null,"metadata":{},"sourceType":"module"}